[gcode_macro G28]
rename_existing: G28.1
variable_home_current: 0.6       # Corrente de homing (em Amperes)
variable_z_hop: 19               # Altura do z-hop após homing de Z (em mm)
variable_z_hop_speed: 3.0        # Velocidade do z-hop (em mm/s)
gcode:
    # Levanta o servo antes de qualquer homing
    RESPOND TYPE=command MSG="HOMMING - Garantindo que a bandeja de purga esteja fechada"
    PURGE_SERVO_CLOSE
    G4 P500
    # Desativa correção de skew
    RESPOND TYPE=command MSG="Perfil SKEW descarregado antes de homing"
    SET_SKEW CLEAR=1
    
    # Detecta quais eixos devem ser homeados
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
    {% set home_x = home_all or 'X' in params %}
    {% set home_y = home_all or 'Y' in params %}
    {% set home_z = home_all or 'Z' in params %}
    
    # Se Z precisa ser homeado, garante que X e Y sejam homeados primeiro
    {% if home_z %}
        {% set home_x = True %}
        {% set home_y = True %}
    {% endif %}
    
    # Lê correntes do printer.cfg
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = printer["gcode_macro G28"].home_current|float %}
    
    # Calcula posição segura (metade do position_max)
    {% set SAFE_X = (printer.configfile.settings['stepper_x'].position_max|float / 2) %}
    {% set SAFE_Y = (printer.configfile.settings['stepper_y'].position_max|float / 2) %}
    
    # Lê configurações de z-hop
    {% set Z_HOP = printer["gcode_macro G28"].z_hop|float %}
    {% set Z_HOP_SPEED = printer["gcode_macro G28"].z_hop_speed|float %}
    
    G90
    
    # Reduz corrente para homing sensorless de X e Y
    {% if home_x or home_y %}
        RESPOND TYPE=command MSG="HOMMING - Reduzindo corrente para homing sensorless"
        {% if home_y %}
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
        {% endif %}
        {% if home_x %}
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
        {% endif %}
        G4 P1000  # Pausa para aplicar nova corrente
    {% endif %}
    
    # Sequência sensorless para CoreXY
    {% if home_y %}
        RESPOND TYPE=command MSG="HOMMING - Homing Y"
        G28.1 Y
        G1 Y5 F1200
    {% endif %}
    
    {% if home_x and home_y %}
        G4 P2000  # Pausa de 2 segundos entre Y e X
    {% endif %}
    
    {% if home_x %}
        RESPOND TYPE=command MSG="HOMMING - Homing X"
        G28.1 X
        G1 X5 F1200
    {% endif %}
    
    # Restaura corrente normal após homing de X e Y
    {% if home_x or home_y %}
        RESPOND TYPE=command MSG="HOMMING - Restaurando corrente normal"
        {% if home_y %}
            SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}
        {% endif %}
        {% if home_x %}
            SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
        {% endif %}
        G4 P1000  # Pausa para aplicar nova corrente
    {% endif %}
    
    # Implementa comportamento do safe_z_home para Z
    {% if home_z %}
        RESPOND TYPE=command MSG="HOMMING - Movendo para posição segura"
        G1 X{SAFE_X} Y{SAFE_Y} F4800
        
        RESPOND TYPE=command MSG="HOMMING - Homing Z"
        G28.1 Z0
        
        # Z-hop após homing
        G1 Z{Z_HOP} F{Z_HOP_SPEED * 60}  # Converte mm/s para mm/min
    {% endif %}
    
    RESPOND TYPE=command MSG="HOMMING - Homing concluído"